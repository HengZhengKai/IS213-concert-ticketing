volumes:
  rabbitmq_data:

services:
  ##################################
  #? kong: API Gateway
  ##################################
  kong:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: kong:latest
    container_name: kong
    restart: always
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
    ports:
      - "8000:8000" # http
      - "8443:8443"
      - "8001:8001"
    volumes:
      - ./api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml
    depends_on:
      rabbitmq:
        condition: service_healthy


  ##################################
  #? event_service: The Event microservice
  ##################################

  event-service:
    build: ./atomic-microservices/event/
    container_name: event-service
    ports:
      - "5001:5001"
    env_file:
      - ./atomic-microservices/event/.env

  ##################################
  #? seat_service: The Seat microservice
  ##################################

  seat-service:
    build: ./atomic-microservices/seat/
    container_name: seat-service
    ports:
      - "5002:5002"
    env_file:
      - ./atomic-microservices/seat/.env

  ##################################
  #? waitlist_service: The Waitlist microservice
  ##################################

  waitlist-service:
    build: ./atomic-microservices/waitlist/
    container_name: waitlist-service
    ports:
      - "5003:5003"
    env_file:
      - ./atomic-microservices/waitlist/.env

  ##################################
  #? ticket_service: The Ticket microservice
  ##################################

  ticket-service:
    build: ./atomic-microservices/ticket/
    container_name: ticket-service
    ports:
      - "5004:5004"
    env_file:
      - ./atomic-microservices/ticket/.env

  ##################################
  #? transaction_service: The Transaction microservice
  ##################################

  transaction-service:
    build: ./atomic-microservices/transaction/
    container_name: transaction-service
    ports:
      - "5005:5005"
    env_file:
      - ./atomic-microservices/transaction/.env

  ##################################
  #? user_service: The User microservice
  ##################################

  user-service:
    build: ./atomic-microservices/user/
    container_name: user-service
    ports:
      - "5006:5006"
    env_file:
      - ./atomic-microservices/user/.env

  ##################################
  #? payment_service: The Payment microservice
  ##################################

  payment-service:
    build: ./atomic-microservices/payment/
    container_name: payment-service
    ports:
      - "5007:5007"
    env_file:
      - ./atomic-microservices/payment/.env

  ##################################
  #? email_service: The Email microservice
  ##################################

  email-service:
    build: ./atomic-microservices/email/
    container_name: email-service
    ports:
      - "5008:5008"
    env_file:
      - ./atomic-microservices/email/.env
    depends_on:
      rabbitmq:
          condition: service_healthy


  celery-email-service:
    build: ./atomic-microservices/celery_email/
    container_name: celery-email-service
    ports:
      - "5009:5009"
    depends_on:
      rabbitmq:
          condition: service_healthy

  ##################################
  #? buy_ticket: The Buy Ticket microservice
  ##################################

  buy-ticket-service:
    build: ./composite-microservices/buy_ticket/
    container_name: buy-ticket-service
    ports:
      - "5100:5100"
    environment:
      RABBITMQ_HOST: rabbitmq
      event_service_URL: http://event-service:5001
      seat_service_URL: http://seat-service:5002
      waitlist_service_URL: http://waitlist-service:5003
      ticket_service_URL: http://ticket-service:5004
      transaction_service_URL: http://transaction-service:5005
      user_service_URL: http://user-service:5006
      payment_service_URL: http://payment-service:5007
      email_service_URL: http://email-service:5008
    depends_on:
      - event-service
      - seat-service
      - waitlist-service
      - ticket-service
      - transaction-service
      - user-service
      - payment-service
      - email-service

  ##################################
  #? sell_ticket: The Sell Ticket microservice
  ##################################

  sell-ticket-service:
    build: ./composite-microservices/sell_ticket/
    container_name: sell-ticket-service
    ports:
      - "5101:5101"
    environment:
      RABBITMQ_HOST: rabbitmq
      waitlist_service_URL: http://waitlist-service:5003
      ticket_service_URL: http://ticket-service:5004
      user_service_URL: http://user-service:5006
      email_service_URL: http://email-service:5008
      celery_email_service_URL: http://celery-email-service:5009
    depends_on:
      - waitlist-service
      - ticket-service
      - user-service
      - email-service
      - celery-email-service                            

  buy-resale-ticket-service:
    build: ./composite-microservices/buy_resale_ticket/
    container_name: buy-resale-ticket-service
    ports:
      - "5102:5102"
    environment:
      RABBITMQ_HOST: rabbitmq
      ticket_service_URL: http://ticket-service:5004
      transaction_service_URL: http://transaction-service:5005
      user_service_URL: http://user-service:5006
      payment_service_URL: http://payment-service:5007
      email_service_URL: http://email-service:5008
    depends_on:
      - ticket-service
      - transaction-service
      - user-service
      - payment-service
      - email-service       

  check-in-ticket-service:
    build: ./composite-microservices/check_in_ticket/
    container_name: check-in-ticket-service
    ports:
      - "5103:5103"
    environment:
      ticket_service_URL: http://ticket-service:5004
    depends_on:
      - ticket-service

  ##################################
  #? rabbitmq: The rabbitmq broker
  ##################################

  rabbitmq:
    image: rabbitmq
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" # AMQP
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s